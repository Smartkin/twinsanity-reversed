Animation structure:
4 bytes bitfield
/*
	Bitfield information:
		0 - Has animation data
		1 - Has blend shape animation data
		2-17 - totalFrames
		18-22 - animation FPS
*/
// Main animation
4 bytes animationDataPacker:
	Unpack:
		blobSize = (animationDataPacker & 0x7F) * 0x8 + // Joint settings, collection of short[4]
													  // short[0] - bitfield,
														(short[0] >> 0x8 & 0xf) - Amount of blend shapes (Only used with blend shape animation data)
														(short[0] >> 0xD & 0x1) - Unused flag
														(short[0] >> 0xC & 0x1) - Adds additional rotation set in OGI's joint
													  // short[1] - Transformation choice bitfield (first 9 bits, rest unused)
														// bit 1 - Translation X
														// bit 2 - Translation Y
														// bit 3 - Translation Z
														// bit 4 - Rotation X
														// bit 5 - Rotation Y
														// bit 6 - Rotation Z
														// bit 7 - Scale X
														// bit 8 - Scale Y
														// bit 9 - Scale Z
													  // short[2] - Transformation index
													  // short[3] - Split transformation index
		(animationDataPacker >> 0xA & 0xFFE) + // Transformations, collection of shorts
		(animationDataPacker >> 0x16) * totalFrames * 0x2; // Transformations but split in 2 parts
2 bytes totalFrames
animationDataSize bytes
// Blend shape animation
4 bytes animationDataPacker
	Unpack: facialAnimationData
2 bytes totalFrames
facialAnimationData bytes

Texture structure:
4 bytes size (total_size is size + 4)
(0x60)96 bytes header data
(0x20)32 bytes of metadata (goes completely unused) (used for XBox data)
(size - 128) bytes of Texture data // VIF Code that tells to transfer GS Packet data and the image data itself
Texture data VIF code structure:
	DMATag (Tag ID - ret, QWC - 5 + (QWC in texture data), Extra data - DIRECT VIF command)
		GS Packet structure:
			0x10 GIFTag (EOP = 0, PACKED mode, Ignore PRIM, 1 NREG descriptor, A+D Descriptor, 3 NLOOP)
			0x10 TRXPOS Description // Coordinates of Source rectangle, coordinates of Destination rectangle, Pixel transmission order
			0x10 TRXREG Description // Texture buffer dimensions (in raw pixels)
			0x10 TRXDIR Description // Activates transmission between buffers
			0x10 GIFTag (EOP = 1, n(in one texture's case 0x200) NLOOP, Ignore PRIM, IMAGE mode, NREG is disregarded due to IMAGE mode)
			(NLOOP * 0x10) Graphics data // Who knew this is gonna be so insanely complex???

// Texture header data
0x0 2 bytes unkVal1
0x2 2 bytes unkVal2
0x4 2 bytes textureWidth(TW) // Width = 2^TW Width in pixels
0x6 2 bytes textureHeight(TH) // Height = 2^TH Height in pixels
0x8 1 byte mipLevels
0x9 1 byte PSM_Format // Texture image format almost always PSMT8, rarely PSMTC32
0xA 1 byte destinationPSM_Format // Usually 0 - PSMTC32
0xB 1 byte TCC(Texture color componenet) // 0 - RGB, 1 - RGBA
0xC 1 byte unkByte
0xD 1 byte TFX(Texture function) // 00 - MODULATE, 01 - DECAL, 10 - HIGHLIGHT, 11 - HIGHLIGHT2
0xE 2 bytes unkBytes1
0x10 4 bytes textureBasePointer(TBP0) // TBP0 = Word Address/64
0x14 4 bytes mipLevel1TBP(TBP1) // Relevant if mips != 0x1 (masked against 0xFFFFFFFF)
0x18 4 bytes mipLevel2TBP(TBP2) // Relevant if mips != 0x1
0x1C 4 bytes mipLevel3TBP(TBP3) // Relevant if mips != 0x1
0x20 4 bytes mipLevel4TBP(TBP4) // Relevant if mips > 0x4 (masked against 0xFFFFFFFF)
0x24 4 bytes mipLevel5TBP(TBP5) // Relevant if mips > 0x4
0x28 4 bytes mipLevel6TBP(TBP6) // Relevant if mips > 0x4
0x2C 4 bytes textureBufferWidth(TBW0) // TBW0 = Width in Units of Texels/64
0x30 4 bytes mipLevel1BufferWidth(TBW1) // Relevant if mips != 0x1
0x34 4 bytes mipLevel2BufferWidth(TBW2) // Relevant if mips != 0x1
0x38 4 bytes mipLevel3BufferWidth(TBW3) // Relevant if mips != 0x1
0x3C 4 bytes mipLevel4BufferWidth(TBW4) // Relevant if mips > 0x4
0x40 4 bytes mipLevel5BufferWidth(TBW5) // Relevant if mips > 0x4
0x44 4 bytes mipLevel6BufferWidth(TBW6) // Relevant if mips > 0x4
0x48 4 bytes CBP(CLUT Buffer Base Pointer) // CBP = Word Address/64
0x4C 8 bytes unkBytes2 // First 4 bytes is likely CLUT buffer width?
0x54 4 bytes vifCodeBlockIndex // Reserved, set by the game during code execution
0x58 4 bytes unkPointer // Reserved, set by the game during code execution
0x5C 2 bytes unkBytes3
0x5E 2 bytes unknown // Reserved, zeroed after reading by the code

Materials structure:
8 bytes header (long) // First 4 bytes are allocated to the bitmask of what shaders are used in the material
4 bytes dmaChainIndex
4 bytes NameSize
NameSize bytes MaterialName //Completely unused by the game, deleted right after reading
4 bytes for shadersAmount?
if (shadersAmount? > 0)
	while (counter < shadersAmount?)
		4 bytes shaderType - 22 total shader types (from the code's switch statement)
		// Depending on shader type a different read can happen
		match shaderType:
			23:
				4 bytes unkInt
				4 bytes unkFloat
				4 bytes unkFloat2
				ReadBaseShader()
			26:
				4 bytes unkInt
				4 bytes unkFloat
				4 bytes unkFloat2
				4 bytes unkFloat3
				4 bytes unkFloat4
				ReadBaseShader();
			16, 17:
				4 bytes unkFloat
				ReadBaseShader()
			1, 2, 4, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 25, 27, 30, 31, 32:
				ReadBaseShader()
		counter++

// ReadBaseShader()
{
	30 bytes of 1 byte data stored in an 8 byte bitfield
	/*
		Byte 1 - UseAlphaBlending
		Byte 2 - AlphaRegPresetIndex
		Byte 3 - UseAlphaTest
		Byte 4 - AlphaTestMethod
		Byte 5 - AlphaValueToBeComparedTo
		Byte 6 - ProcessMethodWhenAlphaTestFailed
		Byte 7 - UseDestinationAlphaTest
		Byte 8 - DestinationAlphaTestMode
		Byte 9 - DepthTestMethod // Depth test is always performed
		Byte 10 - UnkValue (3 bits)
		Byte 11 - ShadingMethod
		Byte 12 - UseTextureMapping
		Byte 13 - MethodOfSpecifyingTextureCoordinates
		Byte 14 - UseFogging
		Byte 15 - ContextToUse (I assume for PS2 this is like buffers so draw to backbuffer or not)
		Byte 16 - UnkValue2 (3 bits)
		Byte 17 - UnkValue3
		Byte 18 - UseCustomAlphaRegSettings
		Byte 19 - SpecInputColorValueA
		Byte 20 - SpecInputColorValueB
		Byte 21 - SpecInputAlphaValueC
		Byte 22 - SpecInputColorValueD
		Byte 23 - FixedAlphaValue
		Byte 24 - FilterWhenTextureIsReducedOrExpanded
		Byte 25 - AlphaCorrectionValue (In RGBA32 Mode left-most is most significant, in RGBA16 Mode right-most is most significant)
		Byte 26 - UnkFlag1
		Byte 27 - UnkFlag2
		Byte 28 - ZValueDrawingMask
		Byte 29 - UnkFlag3
		Byte 30 - HasAnimation
	*/
	/* Bitfield information:
		0 - AlphaBlending (0 - OFF, 1 - ON)
		1-4 - AlphaRegSettingsIndex (Index to an array of preset settings for ALPHA register) // Used only if 38th flag is set
		/*
			Presets (6 total): // Blending formula: OutputColor = (A - B) * C + D. Twins actually supports for 16 but the rest are all pretty much just 0s
				0 - (Cs - Cd) * As + Cd // Blend mix
				1 - (Cs - 0) * As + Cd // Blend add
				2 - (0 - Cs) * As + Cd // Blend sub
				3 - (Cd - 0) * As + Cd // Source alpha * destination
				4 - (0 - Cd) * As + Cd // Zero
				5 - (Cd - 0) * As + 0 // Destination
				6-15 - (Cs - Cs) * As + Cs // Source
		*/
		
		5 - AlphaTest (0 - OFF, 1 - ON)
		6-8 - AlphaTestMethod (000 - NEVER, 001 - ALWAYS, 010 - LESS, 011 - LEQUAL, 100 - EQUAL, 101 - GEQUAL, 110 - GREATER, 111 - NOTEQUAL)
		9-16 - AlphaValueToBeComparedTo
		17-18 - ProcessMethodWhenAlphaTestFailed (00 - KEEP, 01 - FB_ONLY, 10 - ZB_ONLY, 11 - RGB_ONLY)
		19 - DestinationAlphaTest (0 - OFF, 1 - ON)
		20 - DestinationAlphaTestMode (0 - PixelAlpha == 0 pass, 1 - PixelAlpha == 1 pass)
		21-22 - DepthTestMethod (00 - NEVER, 01 - ALWAYS, 10 - GEQUAL, 11 - GREATER)
		23-25 - UnkVal1
		26 - ShadingMethod (0 - Flat Shading, 1 - Gourand Shading)
		27 - TextureMapping (0 - OFF, 1 - ON)
		28 - MethodOfSpecifyingTextureCoordinates (1 - STQ Value, 0 - UV Value) // It's the other way around in docs but Twins code uses XOR
		29 - Fogging (0 - OFF, 1 - ON)
		30 - Context (0 - Context 1, 1 - Context 2)
		31 - Unused
		32-34 - UnkVal2 - UnkVec3 related (only values 2, 3 and 4 are supported so 0b100, 0b011 and 0b010)
		35-37 - UnkVal3 - UnkVec3 related (only values 2, 3 and 4 are supported so 0b100, 0b011 and 0b010)
		38 - UseCustomAlphaRegSettings (1 - use the 5 values below, 0 - use preset, disregard the 4 values below)
		39-40 - Spec of Input Color Value A (00 - Cs RGB value of the source is used, 01 - Cd RGB value in the frame buffer is used, 10 - 0, 11 - Reserved)
		41-42 - Spec of Input Color Value B (00 - Cs RGB value of the source is used, 01 - Cd RGB value in the frame buffer is used, 10 - 0, 11 - Reserved)
		43-44 - Spec of Input Alpha Value C (00 - As Alpha value of the source is used, 01 - Ad Alpha value in the frame buffer is used, 10 - FIX FIX-Field value is used as Alpha, 11 - Reserved)
		45-46 - Spec of Input Color Value D (00 - Cs RGB value of the source is used, 01 - Cd RGB value in the frame buffer is used, 10 - 0, 11 - Reserved)
		47-54 - FixedAlphaValue (FIX)
		55 - FilterWhenTextureIsReduced (0 - NEAREST, 1 - LINEAR) // There are in fact 6 modes, but they are MIP related and Twins uses a hardcoded one when Texture has more than 1 mip level, when texture has more than 1 mip level a value of 0b100 is used meaning LINEAR_MIPMAP_NEAREST
		// ^^^^ This is also TextureFilterWhenTextureIsExpanded (drawn normally) 0 - NEAREST, 1 - LINEAR, some shader types ignore this and always default to either NEAREST or LINEAR
		56 - AlphaCorrectionValue (0 or 1) (Sets MSB of Alpha value for drawing to the frame buffer)
		57 - UnkFlag1
		58 - UnkFlag2
		59 - Z_ValueDrawingMask (0 - Z Buffer is updated, 1 - Z buffer is not updated regardless of the result of the depth test)
		60 - UnkFlag3 - UnkVec2 related
		61 - HasAnimation
		62-63 - Unused
	*/
	// For LOD level calculation the following formula is used: LOD = (log2(1/Q)<<L)+K
	2 bytes lodParamK
	2 bytes lodParamL
	16 bytes unkData
	16 bytes unkData2
	4 bytes unkFloat
	4 bytes unkFloat2
	4 bytes unkFloat3
	4 bytes unkFloat4
	4 bytes textureID
	4 bytes shaderType
	if (bitfield & 0x2000000000000000 != 0)
		// New structure is created in the code and is receiving the next data
		4 bytes header (just raw 4 bytes data)
		4 bytes unkBlobSizePacked
		2 bytes unkBlobSizeHelper
		if (unkBlobSizeHelper != 0) // blobSize is unpacked the same way as animation
			blobSize bytes
}



OGI Structure:
0x10 bytes Header data (byte 1 - Joint structs amount, byte 2 - ExitPoint struct amount, byte 3 - Amount of CameraJointStruct
						byte 6 - Linked rigid models amount, byte 7 - Skin flag, byte 8 - Blend skin flag, byte 9 - CollisionData struct amount)
0x20 bytes BoundingBox
loop Header.byte_1 amount and store in Joint struct:
	4 bytes jointId (only first byte is taken) OgiType1RelIndex
	4 bytes jointIndex (only first byte is taken) Used in animations
	4 bytes parentJoint (only first byte is taken) OgiType1RelIndex
	4 bytes childJoint1 (only first byte is taken) (0 - 15)
	4 bytes childJoint2 (only first byte is taken) (0 - 15)
	0x10 bytes unkVec1
	0x10 bytes bonePosition?
	0x10 bytes unkVec3
	0x10 bytes unkVec4
	0x10 bytes unkVec5
loop Header.byte_2 amount and store in ExitPoint struct:
	4 bytes parentJoint (only first byte is taken) OgiType1RelIndex
	4 bytes exitPointId (only first byte is taken)
	0x40 bytes exitPointMatrix
if (Header.byte_6 > 0) {
	byte_6 bytes ModelAmtRelated
	loop Header.byte_6 amount:
		4 bytes RigidModelID
}
loop Header.byte_1 amount:
	0x40 bytes JointRotationMatrix
4 bytes skinID
4 bytes blendSkinID
loop Header.byte_9 amount and store in CollisionData struct:
	ReadCollisionData();
Header.byte_9 bytes unkMatrixIndex

//ReadCollisionData()
{
	/*
		First 5 shorts - Amounts of different stuff in the blob.
			1st short - Amount of vectors in the BB collision to build from
			2nd short - Amount of unknown shorts (offset determined by the 11th short)
			3rd short - Amount of unknown vectors for comparison against something(position vector?) (their offset is determined by the 6th short)
			4th short - Amount of unknown vectors(offset determined by the 7th short)
			5th short - Amount of unknown vectors (offset determined by the 8th short)
		6 shorts after - Offsets in the blob to the data
			6th short - Offset to some unknown vectors.
			7th short - Offset to some unknown vectors. Amount dictated by the 3rd short
			8th short - Offset to some unknown vectors.
			9th short - Offset to some unknown bytes. (indexes? Joints or Exit Points)
			10th short - Offset to some unknown bytes. (indexes? Joints or Exit Points)
			11th short - Offset to some unknown shorts.
	*/
	0x16 bytes Header data // 11 shorts
	4 bytes blobSize
	blobSize bytes unkBlob
}


Model structure:
4 bytes subModelAmt
loop subModelAmt:
	4 bytes vertexAmount
	4 bytes subModelSize
	subModelSize bytes vifCode
	4 bytes unusedBlobSize
	if (unusedBlobSize > 0) {
		unusedBlobSize bytes unusedBlob // Blob is discarded as soon as it's read
	}


Rigid model structure:
4 bytes Header // Discarded
4 bytes MaterialAmount
loop MaterialAmount:
	4 bytes MaterialID
4 bytes ModelID

// Skin is simple yet insanely complex structure due to using VIF packets as its BLOB
// VIF packets consist of VIFCode and their Data
// while sounding simple each VIFCode perfoms a certain action
// on the VIF registers and data decompressing such as switching between decompression
// modes, setting MODE register, CYCLE register and so on.
// This makes it very hard just to even read the BLOB
// as in reality it would require a VIF interpreter.
// Even worse we need a VIF compiler if we want fully custom skins
Skin structure:
4 bytes subSkinAmt
loop subSkinAmt:
	4 bytes MaterialID
	4 bytes vifBlockSize
	4 bytes vertexAmount
	vifBlockSize bytes vifCode


Blend skin structure:
4 bytes subBlendAmount
4 bytes facesAmount
loop subBlendAmount:
	4 bytes vectorStructures
	4 bytes materialID
	loop vectorStructures and store in VectorStructure struct:
		4 bytes vifBlockSize
		4 bytes vertexAmount
		vifBlockSize bytes vifCode
		0xC bytes BlendShape // Vector3
		loop facesAmount: // Max 255
			4 bytes vectorDataSize
			4 bytes vectorAmount
			(vectorDataSize << 4) bytes vectorData // Vector data in V4-8 format

Mesh structure:
Same as for RigidModel

LOD structure:
4 bytes lodType // can be 0x1001 or 0x1002 else considered illegal LOD
if (lodType == 0x1001) {
	4 bytes meshAmount // only 1st byte is taken as the amount
	4 bytes unkInt // squared after reading
	4 bytes drawDistance // squared after reading if not -1
	loop 3:
		4 bytes unkInt // squared after reading
	4 bytes unused
	loop meshAmount:
		4 bytes meshID
}
if (lodType == 0x1002) {
	1 byte meshAmount
	4 bytes minDrawDistance
	4 bytes maxDrawDistance
	0xC bytes modelRenderDistances // technically just 3 ints read into a 3 integer array
	loop meshAmount:
		4 bytes meshID
}


Skydome structure:
4 bytes unused
4 bytes meshAmount
loop meshAmount:
	4 bytes meshID


Camera structure:
ReadBaseTrigger()
// Rest is read and stored in CameraRelated struct
4 bytes Header
2 bytes unkShort
4 bytes unkFloat
0x10 bytes unkVec
0x10 bytes unkVec2
4 bytes unkFloat2
4 bytes unkFloat3
4 bytes unkUInt
4 bytes unkUInt2
4 bytes unkUInt3
4 bytes unkUInt4
4 bytes unkUInt5
4 bytes unkUInt6
4 bytes unkFloat4
4 bytes unkFloat5
4 bytes unkFloat6
4 bytes unkFloat7
4 bytes unkUInt7
4 bytes unkUInt8
4 bytes unkUInt9
4 bytes unkFloat8
4 bytes subTypeIndex1 // 3 indicates no extra object is present
4 bytes subTypeIndex2 // 3 indicates no extra object is present
1 byte unkByte
// Now this is where the fun begins
if (subTypeIndex1 != 3) { // This is the same as for subTypeIndex2
	match subTypeIndex1:
		0xA19: // Boss camera
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
			0x40 bytes unkMatrix
			0x40 bytes unkMatrix2
			0x10 bytes unkVec
			1 byte unkByte
			4 bytes unkFloat3
			4 bytes unkFloat4
			4 bytes unkFloat5
			4 bytes unkFloat6
			1 byte unkByte2
		0x1C02: // Camera point
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
			0x10 bytes unkVec
		0x1C03: // Camera line
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
			0x10 bytes LineStart
			0x10 bytes LineEnd
		0x1C04: // Camera Path (polygonal chain)
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
			4 bytes vectorAmount
			(vectorAmount * 0x10) bytes pathPoints
			4 bytes unkUInt
			(unkUInt * 0x8) bytes unkData
		0x1C05: // Unused (NULL)
		// Can't be read because methods are set to NULL
		0x1C06: // Camera Spline
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
			4 bytes unkUInt
			4 bytes unkFloat
			(unkUInt * 2 * 0x10) bytes unkVecs
			(unkUInt * 0x8) bytes unkData
			2 bytes unkShort
		0x1C09: // Unknown, unused
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
		0x1C0B: // Camera Point 2
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
			0x10 bytes unkVec
			4 bytes unkFloat3
			1 byte unkByte
		0x1C0C: // Unknown, unused
			4 bytes unkData // Raw bytes read
		0x1C0D: // Camera Line 2
			4 bytes unkInt
			4 bytes unkFloat
			4 bytes unkFloat2
			0x20 bytes unkBoundingBox
			4 bytes unkFloat3
			4 bytes unkFloat4
		0x1C0E: // Unused
		// Nothing, method empty
		0x1C0F: // Camera Zone
			0x50 bytes unkData
			0x50 bytes unkData2
}
// Same for subTypeIndex2

//ReadBaseTrigger()
{
	4 bytes Header
	4 bytes nodeActivators
	4 bytes unkFac1
	0x10 bytes triggerRot
	0x10 bytes triggerPos
	0x10 bytes triggerSize
	4 bytes instAmt
	4 bytes instAmt2
	4 bytes unkInt
	loop instAmt:
		2 bytes instID
}

Trigger structure:
ReadBaseTrigger()
// In game's code base trigger's header is usually treated as an 8 byte header.
	// bit 11 - argument 1 enabled
	// bit 8 - argument 2 enabled
	// bit 9 - argument 3 enabled
	// bit 10 - argument 4 enabled
2 bytes arg1
2 bytes arg2
2 bytes arg3
2 bytes arg4


Instance structure:
0x10 bytes Position
4 bytes RotX
4 bytes RotY
4 bytes RotZ
4 bytes instIdsAmt
4 bytes instIdsAmt2
4 bytes unkInt
loop instIdsAmt:
	2 bytes instanceID
4 bytes positionsAmt
4 bytes positionsAmt2
4 bytes unkInt2
loop positionsAmt:
	2 bytes positionID
4 bytes pathsAmt
4 bytes pathsAmt2
4 bytes unkInt3
loop pathsAmt:
	2 bytes pathID
2 bytes objectID
2 bytes RefListIndex
2 bytes OnSpawnScriptID
// Rest is reading instance properties


Particle data:
// Default RM2 exclusive
loop 3:
	4 bytes textureID
	4 bytes materialID
// All chunks
ReadParticles()
// Default RM2 exclusive
// This usually starts at 0x338E4 offset of Default.RM2's Particle Data section
4 bytes textureID
4 bytes materialID
4 bytes unkData // Raw bytes
0x420 bytes unkBlob
0x40 bytes unkIntegerList
loop 0x10:
	if (unkIntegerList[i] != 0) {
		0x890 bytes unkBlob2 // Partially VIF code
	}


//ReadParticles()
{
	4 bytes particleDataSecType
	if ((particleDataSecType < 0x5 || particleDataSecType > 0x1E) && particleDataSecType != 0x20) {
		// Invalid Particle Data section
		return;
		// In reality the following read CAN happen if a certain global is set to 0
		// but the global before ReadParticles call is set to 1, so this results in this
		// dead code. Potentially TWoC engine leftovers?
		/*
			stream.ReturnToBeg();
			blockSize = stream.GetBlockSize();
			readAmt = stream.GetReadAmt();
			do {
				eof = stream.GetEOF();
				if (eof) {
					stream.SetPosition(readAmt);
					return;
				}
				bytesToRead = 0x800;
				if (blockSize < 0x800) {
					bytesToRead = blockSize;
				}
				bytesToRead bytes unkBlob
				blockSize -= bytesToRead;
				
			} while (true);
		*/
	}
	4 bytes particleTypesAmount?
	if (ParticlesLoaded + particleTypesAmount? > 0x12C) {
		typesOverflow = ParticlesLoaded + particleTypesAmount? - 0x12C;
		particleTypesAmount? = 0x12C - ParticlesLoaded;
	}
	loop particleTypesAmount?:
		ReadParticleType();
		ParticlesLoaded++;
	loop typesOverflow:
		ReadParticleType(); // Read through all the types that couldn't be filled into ParticleType buffer, discard them
	if (!Default) { // This is not used when reading Default Particle Data
		4 bytes particleInstAmt?
		if (particleDataSecType == 0x20) {
			return;
		}
		if (InstancesAmount + particleInstAmt? > 0x300) {
			particleInstAmt? = 0x300 - InstancesAmount;
		}
		loop particleInstAmt?:
			0xC bytes Position?
			if (particleDataSecType >= 0x7) {
				2 bytes unkShort1
				2 bytes unkShort2
				2 bytes unkShort3
				2 bytes unkShort4
			} else {
				unkShort1 = 0;
				unkShort2 = 0;
				4 bytes unkShort3
				4 bytes unkShort4
			}
			if (particleDataSecType >= 0x16) {
				2 bytes unkShort5
			}
			if (particleDataSecType >= 0x8) {
				4 bytes unkInt1
			}
			0x10 bytes InstanceName
			if (particleDataSecType >= 0x9) {
				4 bytes unkInt2
				4 bytes unkInt3
				4 bytes unkFloat1
			}
			if (particleDataSecType >= 0xC) {
				2 bytes unkShort6
				2 bytes unkShort7
				4 bytes unkFloat2
			}
			if (particleDataSecType >= 0xD) {
				4 bytes unkFloat3
			} else {
				unkFloat3 = 0.89999998;
			}
			if (particleDataSecType >= 0xF) {
				2 bytes unkShort8
			}
	}
}

//ReadParticleType()
{
	0x10 bytes particleName
	if (particleDataSecType == 0x20) {
		1 byte pad
		1 byte unkByte1
	}
	2 bytes unkUShort1
	2 bytes unkUShort2
	2 bytes unkUShort3
	2 bytes unkUShort4
	2 bytes unkUShort5
	2 bytes unkUShort6
	2 bytes unkUShort7
	1 byte unkByte2
	1 byte unkByte3
	1 byte unkByte4
	1 byte unkByte5
	4 bytes unkFloat1
	if (particleDataSecType == 0x20) {
		unkFloat1 = 25;
	}
	if (particleDataSecType >= 0x6) {
		4 bytes unkFloat2
		4 bytes unkFloat3
	} else {
		unkFloat2 = 0
		unkFloat3 = 25
	}
	if (particleDataSecType >= 0xA) {
		4 bytes unkFloat4
		if (unkFloat4 <= 2) {
			unkFloat4 = 999999.875
		}
	} else {
		unkFloat4 = 0
	}
	if (particleDataSecType <= 0x16 || particleDataSecType == 0x20) {
		unkFloat5 = 0
	} else {
		4 bytes unkFloat5
	}
	if (particleDataSecType < 0x18 || particleDataSecType == 0x20) {
		unkFloat6 = 0.5
	} else {
		4 bytes unkFloat6
	}
	if (particleDataSecType < 0x7) {
		4 bytes pad
		4 bytes pad
	}
	4 bytes unkFloat7
	0xC bytes unkData1
	if (particleDataSecType < 0x12) {
		0xC bytes pad
	}
	0xC bytes unkData2
	if (particleDataSecType < 0x12) {
		0xC bytes pad
	}
	4 bytes unkFloat8
	4 bytes unkFloat9
	4 bytes unkFloat10
	4 bytes unkFloat11
	4 bytes unkFloat12
	4 bytes unkFloat13
	4 bytes unkFloat14
	4 bytes unkFloat15
	4 bytes unkFloat16
	4 bytes unkFloat17
	4 bytes unkFloat18
	4 bytes unkFloat19
	4 bytes unkFloat20
	4 bytes unkFloat21
	2 bytes unkUShort8
	1 byte unkByte6
	1 byte unkByte7
	4 bytes unkFloat22
	4 bytes unkFloat23
	4 bytes unkFloat24
	4 bytes unkFloat25
	4 bytes unkFloat26
	loop 8:
		0x10 bytes unkVec
	loop 8:
		8 bytes unkLong
	if (particleDataSecType < 0x15) {
		unkFloat27 = 0.125
		unkFloat28 = 0.125
	} else {
		4 bytes unkFloat27
		4 bytes unkFloat28
	}
	4 bytes unkFloat29
	4 bytes unkFloat30
	loop 8:
		8 bytes unkLong
	loop 8:
		8 bytes unkLong
	4 bytes unkFloat31
	4 bytes unkFloat32
	loop 8:
		8 bytes unkLong
	loop 8:
		8 bytes unkLong
	loop 8:
		8 bytes unkLong
	4 bytes unkFloat33
	4 bytes unkFloat34
	4 bytes unkFloat35
	4 bytes unkFloat36
	if (particleDataSecType == 0x20) {
		4 bytes pad
	}
	if (particleDataSecType >= 0x3) {
		loop 8:
			8 bytes unkLong
		1 byte unkByte8
	}
	if (particleDataSecType >= 0x11) {
		1 byte unkByte9
	}
	if (unkByte4 == 0x7) {
		unkByte9 = 2
	}
	if (particleDataSecType == 0x20) {
		1 byte pad
		1 byte pad
		4 bytes pad
	}
	if (particleDataSecType > 0x16 && particleDataSecType != 0x20) {
		if (particleDataSecType < 0x1D) {
			4 bytes unkInt
			if (unkInt > 0) {
				loop unkInt:
					0x10 bytes pad
					4 bytes pad
					4 bytes pad
			}
		}
	} else {
		loop 5:
			if (particleDataSecType > 0xA && particleDataSecType == 0x20) {
				if (i == 0) {
					4 bytes unkFloat37
					4 bytes pad
					4 bytes pad
				} else {
					4 bytes pad
					4 bytes pad
					4 bytes pad
				}
			}
	}
	if (particleDataSecType >= 0x10) {
		if (particleDataSecType == 0x20) {
			2 bytes unkShort // Particle has a separate short[4] array(initialized to -1), this one is stored in index 1
			1 byte pad
			1 byte pad
		} else {
			4 bytes unkShort // Same as above
		}
		4 bytes unkFloat38
	} else {
		unkFloat38 = 0;
		unkShorts[1] = 0;
	}
	if (particleDataSecType >= 0x19 && particleDataSecType != 0x20) {
		4 bytes unkShort // Same as above short, except index is 2
		4 bytes unkFloat39
	} else {
		unkShorts[2] = 5;
		unkFloat39 = 0.5;
	}
	if (particleDataSecType >= 0x1A) {
		if (particleDataSecType != 0x20) {
			4 bytes unkFloat40
		}
	}
	else {
		unkFloat40 = 0;
	}
	if (particleDataSecType != 0x20) {
		if (particleDataSecType > 0x1A) {
			4 bytes unkInt
		}
		if (particleDataSecType > 0x1B) {
			4 bytes unkFloat37
		}
	}
	if (particleDataSecType >= 0x1E) {
		0x10 bytes unkVec
	} else {
		if (unkByte2 == 0) {
			// Too lazy to decipher these formulas
				fVar1 = unkFloat7;
				fVar4 = *(float *)(unkData1 + 0x4);
				fVar2 = *(float *)(unkData1 + 0x8);
				fVar5 = unkFloat21;
				fVar6 = *(float *)(unkData2 + 0x4);
				fVar7 = *(float *)(unkData2 + 0x8);
				fVar3 = unkFloat30 * 0.00010000;
				unkVec.x = ((fVar1 + *(float *)unkData1) * fVar5 + *(float *)unkData2 + fVar3) * 0.75000000;
				unkVec.z = ((fVar1 + fVar2) * fVar5 + fVar7 + fVar3) * 0.75000000;
				unkVec.y = ((fVar1 + fVar4) * fVar5 + fVar6 + fVar3) * 0.75000000;
		} else {
			unkVec.x = 10;
			unkVec.y = 10;
			unkVec.z = 10;
		}
		unkVec.w = 0;
	}
}


Scenery data:
/*
	0x10000 - Has Skydome
	0x20000 - Has lighting
	Rest are reserved DO NOT TOUCH THEM
*/
4 bytes unkData (raw bytes)
4 bytes nameLength
nameLength bytes name
4 bytes unkUInt
4 bytes sceneryType
1 byte unkByte
if (unkData & 0x10000 != 0) {
	4 bytes skydomeID
}
if (unkData & 0x20000 != 0) {
// Stored in UnkStruct(Probably something like LightsRenderer or something Idk)
	0x400 bytes lightingArraysAccessor // Stores an array of all lights in the scenery which can be accessed by scenery nodes. Array is a structure of 8 bytes which is a pair of (light index + light id)
	4 bytes lightsAmount
	4 bytes lightAmbientAmount
	4 bytes lightDirectionalAmount
	4 bytes lightPointAmount
	4 bytes lightNegativeAmount
	loop lightAmbientAmount:
		ReadBaseLight();
	loop lightDirectionalAmount:
		ReadBaseLight();
		0x10 bytes unkVec
		2 bytes unkShort
	loop lightPointAmount:
		ReadBaseLight();
		2 bytes unkShort
	loop lightNegativeAmount:
		ReadBaseLight();
		0x10 bytes unkVec
		4 bytes unkFloat1
		4 bytes unkFloat2
		4 bytes unkUInt1
		4 bytes unkUInt2
		2 bytes unkUShort1
		2 bytes unkUShort2
}
// Root scenery type
if (sceneryType == 0x160A) {
	4 bytes unkUInt
	ReadScenery_0x1600();
}

//ReadBaseLight()
{
	4 bytes unkData (raw bytes)
	4 bytes radius
	0x10 bytes colorVec
	0x10 bytes lightPos
	0x10 bytes unkVec1
	0x10 bytes unkVec2
}

//ReadScenery_0x1600() // Scenery node
{
	ReadBaseScenery();
	0x20 bytes sceneryTypes (int[8])
	loop 8:
		match sceneryTypes[i]:
			0x1600: // Scenery node
				ReadScenery_0x1600();
			0x1605: // Scenery leaf
				ReadBaseScenery();
}

//ReadBaseScenery()
{
	4 bytes unkObjType
	if (unkObjType == 0x1613) {
		2 bytes meshAmount
		2 bytes lodsAmount
		sum = meshAmount + lodsAmount
		if (sum != 0) {
			(sum * 0x20) bytes unkBoundingBoxes
			(sum * 0x4) bytes itemIDs // First meshes then LODs
			(sum * 0x40) bytes unkMatrices
		}
	}
	0x10 bytes unkVec1
	0x10 bytes unkVec2
	0x10 bytes unkVec3
	0x10 bytes unkVec4
	0x10 bytes lightsEnabled
}


Dynamic scenery:
4 bytes unkInt
2 bytes modelAmount
if (modelAmount != 0) {
	loop modelAmount:
		4 bytes unkInt1
		4 bytes ogiType3Amount
		if (ogiType3Amount != 0) {
			loop ogiType3Amount:
				ReadCollisionData()
		}
		4 bytes unkInt2
		4 bytes unkBlobSizePacked // Suddenly different blob packing!
		2 bytes unkBlobSizeHelper
		/*
			Unpack:
				blobSize = (unkBlobSizePacked & 0x7F) * 0x8 +
					(unkBlobSizePacked >> 0x9 & 0x1FFC) +
					(unkBlobSizePacked >> 0x16) * unkBlobSizeHelper * 0x4
		*/
		blobSize bytes dynBlob
		1 byte lodFlag
		4 bytes modelID // Mesh or LOD depending on flag
		0x20 bytes boundingBox
}


Chunk links:
4 bytes amount
loop amount:
	/*
		2 bit flag (why 4 bytes though??? Probably for more functionality that never came to be)
		1st - bit determines if there are any bounding box triggers that make to when touched start loading the chunk
		2nd - bit is unknown but it plays a role when loading the chunk
	*/
	4 bytes loadingFlags
	4 bytes pathLength
	pathLength bytes pathName
	/*
		1st bit - determines whether the chunk itself is rendered
		2nd-7th bits - determine something
		8th bit - determines if the chunk should be kept in memory or preloaded
		9th bit - determines whether the load wall is active if it is not only the scenery part of the chunk is rendered
		20th bit - MUST be set if a load wall is present
		THE REST OF THE BITS SHOULD NOT BE TOUCHED
	*/
	4 bytes bitfield
	0x40 bytes objectMat // How to transport objects relative to the linker
	0x40 bytes chunkMat // How to render the chunk relative to the linker
	if (bitfield & 0x80000 != 0) {
		// Stored in UnkStruct
		0x40 loadWall // Where the linker's transfer point is
	}
	ReadUnkStruct2();


//ReadUnkStruct2()
{
	if (unkData & 0x1 != 0) {
		// Stored in UnkStruct2
		4 bytes unkData // raw bytes
		ReadCollisionData();
		ReadUnkStruct2();
	}
}

Instance template:
4 bytes nameLength
nameLength bytes templateName
2 bytes objectId
1 byte unkByte1
1 byte unkByte2
4 bytes unkInt1
4 bytes unkInt2
4 bytes unkInt3
if (unkInt1 != 0) {
	loop unkInt1:
		2 bytes unkShorts
}
1 byte unkByte3
1 byte unkByte4
// Rest is reading instance properties


// This one is quite special because this data type is read
// unlike any other the game takes an approach of directly uploading
// the data into VU memory instead of passing through some usual routine
// reading a section. But thankfully the data structure is not complex
// and was easily figured out by the team way before the reversing project commenced.
Collision data:
4 bytes unkInt
4 bytes triggerAmt
4 bytes grpAmt
4 bytes triAmt
4 bytes vertexAmt
loop triggerAmt:
	0xC bytes vec3_1
	4 bytes minTriggerIndex
	0xC bytes vec3_2
	4 bytes maxTrigerIndex
loop grpAmt:
	4 bytes groupSize
	4 bytes groupOffset
loop triAmt:
	8 bytes packedTriangleInfo
loop vertexAmt:
	0x10 bytes vertex


PSF structure:
4 bytes texMatAmt
loop texMatAmt:
	4 bytes texID
	4 bytes matID
	if (not textureLoaded(texID)):
		ReadTexture(); //Look at texture format
	if (not materialLoaded(matID)):
		ReadMaterial(); // Look at material format
4 bytes vectors
4 bytes unkInt
loop vectors:
	16 bytes vector


PTC structure:
4 bytes TextureID
4 bytes MaterialID
variable bytes TextureData // Look at texture structure
variable bytes MaterialData // Look at material structure


PSM structure:
// List of PTC


Save file? structure:
loop 16:
	4 byte unkInt[index]
4 byte resourceAmount
loop resourceAmount:
	4 bytes resourceNameLength
	resourceNameLength bytes resourceName
	1 byte flag
	if (flag != 0) {
		32 bytes unkChunkRelatedBytes
	}
//Rest needs more research











