Animation algorithm:
// Values are stored as a fixed point value for translation and scale vectors (to convert VALUE / 4096)
// Rotations are stored as Int16 rotation units (to convert to radians do ROT / (65536 * 2 * PI))
Step 1:
* Set pointer to static transforms (frame and animation timeline independent, depends on joint chosen index)
transformPointer = jointsSettingsPtr + jointSettings.Count * 8;
* Set pointer to interpolate transforms (frame and animation timeline dependent, also depends on joint chosen index)
currentFrameTransform = transformPointer + staticTransformSection.Length + currentFrame * 2 * componentsUsedPerFrame
nextFrameTransform = transformPointer + staticTransformSection.Length + nextFrame * 2 * componentsUsedPerFrame
// E.G.
// Total length: 9 frames
// Frame 4
// Next frame 5
// Joint settings are 0 index on static transform, 0 index on interpolate transform
// componentsUsedPerFrame is 2
// Joint total 1
// Assume jointsSettingsPtr to be 0
transformPointer = 0x8
currentFrameTransform = 0x8 + 0xE + 0x4 * 2 * 2 = 0x26
nextFrameTransform = 0x8 + 0xE + 0x5 * 0x4 = 0x2A
// Frame 8
// Next frame 9
transformPointer = 0x8
currentFrameTransform = 0x8 + 0xE + 0x8 * 0x4 = 0x36
nextFrameTransform = 0x8 + 0xE + 0x9 * 0x4 = 0x3A
